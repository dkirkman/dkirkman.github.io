<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Wild Silicon]]></title><description><![CDATA[David's development blog]]></description><link>https://wildsilicon.com</link><generator>RSS for Node</generator><lastBuildDate>Sat, 26 May 2018 16:32:06 GMT</lastBuildDate><item><title><![CDATA[Interactive Munker-White illusion]]></title><description><![CDATA[Demonstration that a single color can be perceived quite differently depending on what it's surrounded with.]]></description><link>https://wildsilicon.com/blog/2018/munker-illusion/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/munker-illusion/</guid><pubDate>Wed, 23 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;noscript&gt;
Munker Illusion requires javascript (sorry!)
&lt;/noscript&gt;
&lt;blog-munker-illusion reactclass=&quot;MunkerIllusion&quot;
                      background=&quot;blue&quot; bar=&quot;yellow&quot; grating=&quot;red&quot;&gt;
&lt;/blog-munker-illusion&gt;
&lt;p&gt;While writing my last &lt;a href=&quot;/blog/2018/cyclical-colormaps/&quot;&gt;post&lt;/a&gt;
I was reminded of two interesting aspects of psychophysics: color
perception depends to a large degree on surrounding colors, and color
perception is different on large and small spatial scales.  These
effects combined are the basis of the Munker-White illusion.&lt;/p&gt;
&lt;p&gt;In the image/widget above there are only three colors.  The background
is a alternating series of yellow and then blue constant width
stripes.  Over the background are two red gratings — the width of the
gratings exactly matches the width of the background stripes.  On the
left, the grating is aligned such that it obscures the yellow stripes
and allows the blue stripes to shine through.  On the right, the
grating is aligned to obscure the blue stripes.&lt;/p&gt;
&lt;p&gt;With the initial parameters, most people will perceive the colors of
the two red gratings too be distinctly different.  To me it looks
redish, perhaps a bit magentaish on the left, and orangish on the
right.  The two gratings, of course, have identical colors.  To see
this, play with the background slider and take the background to
white.  If you don’t believe me, the
&lt;a href=&quot;https://github.com/dkirkman/ws-munker-illusion&quot;&gt;code&lt;/a&gt; for the
illusion is on github.&lt;/p&gt;
&lt;p&gt;What is going on?  At first glance, you might imagine that somehow the
colors are combining — the blue and red combine to make purple and
the red and yellow combine to make orange.  If you make the stripes
small enough, that is exactly what is going on.  In the widget above
the smallest you can make the stripes is one pixel, which depending on
the DPI and viewing distance to your display may be enough.  But even
if your eyesight is sufficient to resolve the 1 pixel stripes,
combining colors (e.g. red and green to make yellow) is exactly what
is going on at the subpixel level of your display.&lt;/p&gt;
&lt;p&gt;But what’s going on in this illusion is different: the color shift
occurs even when the stripes are quite wide.  And the magnitude of the
color shift depends on how wide the stripes are — if you use the
slider to adjust the stripes to be wide enough the color shift will
disappear entirely.  Adjust the strip width to a point where the
stripes are as wide as possible but you still see a color shift.  The
trippy thing is that color shift is uniform across the red grating
elements: it’s not like it is more pronounced near the edges.&lt;/p&gt;
&lt;p&gt;Again, what’s going on here?  It turns out that nobody really knows.
Wikipedia has
&lt;a href=&quot;https://en.wikipedia.org/wiki/White%27s_illusion&quot;&gt;explanations&lt;/a&gt; of
what’s &lt;em&gt;not&lt;/em&gt; going on and several theories about what &lt;em&gt;might&lt;/em&gt; be a
correct explanation.  But at the moment, this is an unsolved problem.&lt;/p&gt;
&lt;p&gt;Perception is tricky.  Psychophysics is at the intersection of
physics, biology, and information theory.  It’s messy.
Roughly 30% of our cortex is dedicated to processing visual
information. This is why visualization so powerfully helps us
understand data — it quite literally allows us to use more of our
brain.  But we can’t feed it arbitrary input and expect it to make
sense of that input for us.&lt;/p&gt;
&lt;p&gt;Our visual system is designed to make sense of a rainforest or
savanna.  To build a 3d mental model of the world that we can
navigate.  Our primate heritage means that our color perception is
probably geared towards finding ripe fruit and avoiding dangerous
critters — and to do so in a variety of lighting conditions.  It just
speculation of course, but it strongly seems that we are wired to see
“red” fruit as red, no matter what the physics of the illumination
happens to be at the moment.  What matters isn’t so much the spectrum
of the reflected light, but the spectrum &lt;em&gt;relative&lt;/em&gt; to the foliage
around the fruit.  Psychophysics is fun, but psychophysics is
complicated.&lt;/p&gt;
&lt;p&gt;We should always keep this in mind when designing visualization.  Our
visual cortex brings tremendous processing power and modeling ability
to help us understand our data.  But if we feed it unnatural scenes
it’s not likely to behave as we expect.&lt;/p&gt;
&lt;p&gt;This illusion is not a color-only affect, the original
White illusion (minus Munker!) is just grayscale.  It’s reproduced
below.&lt;/p&gt;
&lt;p&gt;One last thing: what color was the
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_dress&quot;&gt;dress&lt;/a&gt; again?&lt;/p&gt;
&lt;noscript&gt;
Munker Illusion requires javascript (sorry!)
&lt;/noscript&gt;
&lt;blog-munker-illusion reactclass=&quot;MunkerIllusion&quot;
                      background=&quot;black&quot; bar=&quot;white&quot; grating=&quot;gray&quot;&gt;
&lt;/blog-munker-illusion&gt;</content:encoded></item><item><title><![CDATA[Constructing a cyclical colormap]]></title><description><![CDATA[Designing an effective cyclical colormap is a bit tricky.  Can the recent trend of using perceptually uniform colorspaces produce a cyclical map that is both compelling and capable of discerning small features?]]></description><link>https://wildsilicon.com/blog/2018/cyclical-colormaps/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/cyclical-colormaps/</guid><pubDate>Thu, 17 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last &lt;a href=&quot;/blog/2018/demon/&quot;&gt;post&lt;/a&gt; I gave the option of using a
variety of different colormaps.  The reason is because historically
I’ve always favored plain grayscale colormaps.  I’ve always found that
“color” colormaps grossly distort my data &lt;em&gt;and&lt;/em&gt; make it considerably
more difficult to accurately identify features.  But a cyclical
cellular automaton is, well, cyclic.  I can, of course, construct a
cyclic grayscale map — and I did — but when you do so there is a
symmetry that it would be nice to break.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot;
                 type=&quot;cyclic-grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This looks like a perfectly decent colormap to me, the only problem
is how do I differentiate values on the left side of the wheel from
values on the right side?  Luminosity alone is not enough, we’re going
to need something else to vary.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This symmetry could certainly be broken with color, for example with a
cyclical version of the infamous rainbow map.  The classic way to generate
it is to vary the channel intensities such that R, G, and B are fully
on for one third of the range, with the other colors either ramping up
or ramping down.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapRGBPlot&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RGB channel intensities for the classic rainbow map.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The classic rainbow colormap rotates through all fully saturated
colors.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because all of the colors in the classic rainbow map are fully
saturated the intensity of the colormap peaks at the secondary colors
yellow, cyan, and purple.  At all three locations two of the RGB
channels are at their maximum values, and the result is that smooth
functions will look like they have peaks at the secondary colors.
This is one of the reasons I’ve hated this colormap through the years.
Another closely related issue is that when I look at this map, I see
six colors: red, yellow, green, cyan, blue and purple.  But they
aren’t taking up approximately equal parts of the map.  There is a
large red section, that transitions into a very narrow yellow section,
followed by a large green section, followed by a narrow cyan section,
and so on.&lt;/p&gt;
&lt;p&gt;One possible way to fix these deficiencies in the rainbow map would be
to smooth out the transitions into and away from the secondary colors.
As shown below, one way would be to ramp up the guns with a sine function
instead of linearly.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapRGBPlot&quot; trans=&quot;sin&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One way to “improve” the classic rainbow map is to smooth out the transition
into and out of the secondary colors yellow, cyan, and purple.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s call this sine ramp up “David’s kludgy rainbow”, because I employ
this kludge whenever I’m in a situation where I actually need a
colormap.  Of course, after seeing the results I always discard the
“color” colormap and find some way to make it work with a grayscale.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;kludge-rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My kludgy “fix” to the rainbow colormap.  The apparent spikes at the
secondary colors are gone, and the size of the six “colors” are more
equal.  But in practice it doesn’t really work any better than the
original rainbow and is an object lesson that amateurs should stay
away from colormap design.  It is however, the rainbow map used in the
Demon visualization.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A lot of ink has been spilt explaining exactly how
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/&quot;&gt;bad&lt;/a&gt;
the &lt;a href=&quot;https://www.climate-lab-book.ac.uk/2014/end-of-the-rainbow/&quot;&gt;rainbow&lt;/a&gt; colormap
really is, so it’s perhaps not too surprising that I aggressively
dislike it.  Even better, since I last seriously considered using a
“color” colormap a considerable amount of ink has been spilt
describing better ways to construct them.  &lt;a href=&quot;https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/&quot;&gt;Many&lt;/a&gt;
end up pointing back to Cynthia Brewer’s
&lt;a href=&quot;http://colorbrewer2.org/#type=sequential&amp;#x26;scheme=BuGn&amp;#x26;n=3&quot;&gt;colorbrewer&lt;/a&gt;.
The basic idea behind most proposals is to assert that the problem
with the rainbow map (or other traditional colormaps like Matlab’s Jet
map) is that euclidean distance in RGB space does not match human
perception.  This is obviously true looking at the rainbow map — each
point is separated by an equal distance in RGB space yet perceptually
we transition through the secondary colors much more quickly than others.&lt;/p&gt;
&lt;p&gt;The proposed solution is to produce maps with equidistant spacing in
some colorspace designed to match human perceptions.  Psycophysicists
have spent decades producing such a space, &lt;a href=&quot;https://en.wikipedia.org/wiki/Lab_color_space#CIELAB&quot;&gt;CIE
Lab&lt;/a&gt;.  So if we
take paths through CIE Lab (or its polar variant HCL) we should end up
with perceptually uniform colormaps — meaning that each step on the
colormap will be perceived to be the same amount of different as any
other step.  But I’m still not convinced that being perceptually
uniform also means that they are generally suitable for extracting
unbiased quantitative information.&lt;/p&gt;
&lt;p&gt;But whether or not they are actually a good idea, d3 now has
&lt;a href=&quot;https://github.com/d3/d3-scale-chromatic&quot;&gt;scale-chromatic&lt;/a&gt; with a
couple of dozen new color scales, all of which look good, most of
which are constructed to be perceptually uniform, and several of which
(the viridis, inferno, magma, and plasma maps) seem to have been very
carefully designed.  There is even a cyclical map in scale-chromatic.&lt;/p&gt;
&lt;p&gt;The pressing question for me is:  how do I work out if any of these
colormaps is actually any good?  Is there anything that can be done much
beyond drawing a heightmap of the world and saying, “yep, looks good”?
What we need are test images with properties that enable us to objectively
scrutinize a colormap.  If we step away from cyclical colormaps for the
moment, &lt;a href=&quot;https://arxiv.org/abs/1509.03700&quot;&gt;Kovesi (2015)&lt;/a&gt; provides us
with just such an image.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kovesi’s image to evaluate colormaps.  Horizontally it’s a linear
ramp from 0 to 1, with a sine wave superimposed on top of it.  The sine
wave has a period of 8 pixels, and a peak-to-value amplitude of 0.1 at
the top of the image.  Vertically, the amplitude of the sine wave in
linearly ramped down to zero by the bottom of the image.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Rainbow colormap applied to Kovesi’s image.  And now we’ve got some
objective evidence to back up our assertion that the rainbow colormap
is rubbish.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;kludge-rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The kludgy rainbow.  It’s a little better, but it’s still apparent that
it’s not at all suitable for quantitative visualization.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Kovesi’s test image is useful for a couple of reasons.  As the
amplitude of the sine wave perturbation decreases at lower rows, it
allows us to immediately evaluate how sensitive the color map is to
small amplitude features.  More importantly, it allows us to determine
if it is equally sensitive to small amplitude features at all points
in the map.  For example, the large green area in the rainbow maps
where most humans have trouble distinguishing small amplitude features
is readily apparent.&lt;/p&gt;
&lt;p&gt;The rapid oscillation of the sine wave is also designed to evaluate
how well a map works at highlighting features on small spatial scales.
This is important, because there is some evidence that perception of
color is subtly different on small spatial scales compared to large
ones.  See Kovesi’s &lt;a href=&quot;https://arxiv.org/abs/1509.03700&quot;&gt;paper&lt;/a&gt; for background
and references to the existing literature on this.&lt;/p&gt;
&lt;h2&gt;Are there colormaps that actually work?&lt;/h2&gt;
&lt;p&gt;So far we’ve worked out that the classic grayscale map is objectively good,
and that the classic rainbow map is not.  The next obvious question would
be, are there “color” colormaps that are also objectively good?&lt;/p&gt;
&lt;p&gt;Not surprisingly, most of the d3 colormaps are excellent.  At the bottom of
this page there is an interactive explorer you can use to view all of the
colormaps in d3-scale-chromatic (as well as the other colormaps discussed
in this post).&lt;/p&gt;
&lt;p&gt;A few that caught my eye are:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;bugn&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;BuGn colormap.  One of a large number of colormaps that smoothly transition
from one color to another.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inferno colormap.  Part of a set including the viridis, magma and plasma
maps, inferno was carefully constructed to be perceptually uniform and to
present a continuous change in lightness.  While more “colorful” than simple
maps that transition from one color to another, the overall impression seems
dominated by the continuous ramp up in lightness.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;cubehelix&quot;&gt;
&lt;/blog-colormap &gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CubeHelix colormap.  This map was designed be both a uniform ramp in
lightness, and to contain a large number of hues.  As a result of the
linear ramp in lightness, it’s quite good at distinguishing small features
in the image.  Due to the large number of hues, it does seem to break into
sections — dark, green orange, purple, and blue.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even among the d3 colormaps, I’m not keen on maps with a large number
of hues even if they perform well on the test image.  The reason is
that in my own perception, I tend to split hues into different
categories.  I see shades of gray, but it’s all gray, which is good
for visualizing quantitative data.  With the multi-hued colormap such
as CubeHelix for example, I see a sequence of separate hues, and I
perceive the different hues to by qualitatively different.&lt;/p&gt;
&lt;p&gt;One way to visualize this is with another test image.  In this case I’m
displaying an exponentially damped sine wave —  the result is a series
of peaks and valleys where the peaks each summit at a different level.&lt;/p&gt;
&lt;p&gt;In grayscale or simple transition between two colors it looks like&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine wave in grayscale.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;bugn&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine wave with the BuGn map from
d3-scale-chromatic.  The peaks far from center seem a bit more visible
than they do in grayscale, but this is just due to the fact that BuGn
is an inverted map, going from light to dark — as you look through
this page you’ll notice that small features always seem a bit more
discernible on the light part of the maps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With multi-hued colormaps however, different rings seem to be qualitatively
different.  This effect is strongest with the CubeHelix colormap&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;cubehelix&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine with the d3-scale-chromatic CubeHelix colormap.
Note that the inner circles each seem to be a qualitatively different color.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;d3-scale-chromatic also has a cyclical colormap which they call a Rainbow map.  It is designed to be significantly more pleasant than either the
classic rainbow or my own kludgy rainbow.  It does reasonable well for discerning small features.  The flat spots, however, are more pronounced than for most
of the good linear maps.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;d3rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;d3 rainbow — the cyclical colormap provided by scale-chromatic.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What’s the difference between good and bad colormaps?&lt;/h2&gt;
&lt;p&gt;Before we circle around to constructing a nice cyclic colormap, I think we
need a better grip on why some colormaps work well for feature discrimination,
and some do not.  Consider the following three maps:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;constant-lightness&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;The top map is the classic rainbow, the middle map is the d3 inferno
scale, and the bottom map is a colorwheel from the HCL space (polar
variant of CIELAB) with constant chroma and luminance.  I’m calling
the bottom map “constant lightness”.&lt;/p&gt;
&lt;p&gt;It seems to be generally accepted that the rainbow map is terrible
because it is not perceptually uniform.  However, the constant
lightness map &lt;em&gt;is&lt;/em&gt; perceptually uniform and seems nearly as bad — if
not worse — than the rainbow map.  What gives?  Well, lets look
again, this time with a color bar below each map showing the grayscale
version of the map generated by taking the L component of each color
in CIELAB space.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;constant-lightness&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;To my eyes, it sure looks like I am able to make out small scale features
when the luminosity of the map is changing, and when the luminosity is
not changing, different hues are doing little for me.  This is particularly
evident in the rainbow map, where the flat parts of the luminosity curve
correspond exactly with the parts of the test image with poor discrimination
ability.&lt;/p&gt;
&lt;p&gt;I take from this that while using a perceptually uniform map might be
nice, it’s not actually all that important.  It does seem to be
important, however, for the map to have a nice monotonically lightness
curve.&lt;/p&gt;
&lt;p&gt;I’m not the first to have come to this conclusion.  Kovesi emphasizes
it as well in his paper, and Mark Abeln has an incredible &lt;a href=&quot;http://therefractedlight.blogspot.com/2010/06/luminance-is-more-important-than-color.html&quot;&gt;demo&lt;/a&gt;
of the same image with luminance removed, and with color removed.  You
want to look at it.&lt;/p&gt;
&lt;h2&gt;Let’s construct a cyclic colormap already&lt;/h2&gt;
&lt;p&gt;It’s been a bit of a journey, but everything is in place to construct a nice
unconfusing cyclical colormap with a good ability to discriminate small features.&lt;/p&gt;
&lt;p&gt;We want:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A simple lightness profile&lt;/li&gt;
&lt;li&gt;No more than two colors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The simple lightness profile will ensure our ability to discriminate small
features.  We need at least two colors to break the symmetry of a cyclical
grayscale map.  If we keep it exactly at two, we can minimize the tendency
to view different colors as qualitatively different things.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;cyclic-demon&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;cyclic-demon&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;So this is my super simple cyclical colormap.  In lightness, it’s a linear
ramp from black to white and then back to black.  I add a little red and
blue to distinguish the left side of the cycle from the right side of the cycle.&lt;/p&gt;
&lt;p&gt;It’s not the prettiest map (the d3 rainbow map is arguably more attractive)
but it fulfills my primary objective of being able to discriminate small features are all parts of the scale.  So I kind of like it.  And that’s why is the
default colormap for my &lt;a href=&quot;/blog/2018/demon&quot;&gt;Cyclic Cellular Automaton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To generate the actual scale, I just use
&lt;a href=&quot;https://github.com/gka/chroma.js/&quot;&gt;chroma.js&lt;/a&gt;.  Applying
&lt;code&gt;.correctLightness()&lt;/code&gt; to the scales ensures a uniform ramp
in lightness as the scale transitions between colors.  So I just need
to create two scales and then stitch them together, one going from black to
white via red and another scale that goes back by way of blue.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scale1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chroma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;white&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;correctLightness&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scale2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chroma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;white&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;correctLightness&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I’ll leave you with a little widget you can use to select any of the colormaps
discussed in this post.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapSelector&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;All of the code used to generate the images on this page are in a github
&lt;a href=&quot;https://github.com/dkirkman/ws-colormap&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript Demons]]></title><description><![CDATA[A 2d simulation of a cyclical cellular automaton, along with a discussion of its dynamics.  This delightful little   visualization has long been my personal "hello world" when diving into new environments, and I'm happy to inaugurate my blog with it.]]></description><link>https://wildsilicon.com/blog/2018/demon/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/demon/</guid><pubDate>Sat, 28 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;style type=&quot;text/css&quot;&gt;
.demon table {
  border-collapse: collapse;
}

.demon td {
  border: 2px solid black;
  height: 50px;
  width: 50px;
  text-align: center;
}

td.demon_neighbor {
  background: #BBBBBB;
}

td.demon_cycle {
  background: #BBBBBB;
}

td.demon_center {
  background: #777777;
}
&lt;/style&gt;
&lt;p&gt;&lt;blog-demon&gt;&lt;/blog-demon&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;noscript&gt;
          NO JAVASCRIPT -- NO CELLULAR AUTOMATON
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This is a very simple 2d cellular automaton.  It has N states denoted 0
to N-1, and evolves according to only a single rule: a cell with
value n will convert any of its neighbors with a value of n-1.  In other
words, a cell in state 5 will convert any of it’s neighbors in state 4 to
state 5.  That may happen even if in the same time step the original cell is
being converted from state 5 to state 6.  The states are cyclical:  state 0
can convert state N-1.  Hence it’s a Cyclical Cellular Automaton, or CCA.&lt;/p&gt;
&lt;p&gt;If at some point in the simulation you can form a loop of adjacent cells
from state 0 to state N-1, and have state N-1 also adjacent to start 0,
then you’ll have a loop that cycles indefinitely.  Such a loop is called
a demon.&lt;/p&gt;
&lt;p&gt;I’m not aware of much literature on CCAs, they first came to my
attention from the August 1989 “Mathematical Recreations”
&lt;a href=&quot;https://www.scientificamerican.com/article/computer-recreations-1989-08/&quot;&gt;column&lt;/a&gt;
written by Alexander Dewdney for Scientific American.  They exhibit
interesting behavior and when started from a random state undergo a
gradual state transition into very ordered dynamics.  Run the
simulation at the top of this page and experience it for yourself.&lt;/p&gt;
&lt;p&gt;As with any cellular automaton, the term &lt;em&gt;neighborhood&lt;/em&gt; admits a variety
of definitions.  In this simulator, I’ve provided two standard options.&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_center&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Von_Neumann_neighborhood&quot;&gt;von Neumann
neighborhood&lt;/a&gt;.
The center cell 4 can convert any of the light gray cells, or cells with
coordinates that differ by one from the center cell in either x or y, but
not both.  Diagonally adjacent cells that differ in both x and y
can not be converted.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_center&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moore_neighborhood&quot;&gt;Moore
neighborhood&lt;/a&gt;.  The
center cell can convert any of it’s neighbors, even diagonally adjacent
cells.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Personal Background&lt;/h2&gt;
&lt;p&gt;A CCA simulator with 16 states and a von Neumann neighborhood was the
first computer program I &lt;em&gt;ever&lt;/em&gt; wrote.  Because it’s so simple to implement
and because it is also so fun to play with, over the years it’s become my
own personal “Hello World” program when I start working with a new tech
stack.&lt;/p&gt;
&lt;p&gt;I got my first computer in August 1989.  I’d played with computers
before: a few hours at a time after school in the computer lab, a few
minutes stolen here and there at a friends house.  But this was the
first one that was mine, and that I had access too for extended
periods of time.  It was a 286.  I don’t remember the exact brand, but
it was something my parents got at Sears.  It was slick.  It had a
color display, a hard drive, and ran MS DOS 3.1.&lt;/p&gt;
&lt;p&gt;Like all kids in summer with a new computer, I didn’t sleep for a few
weeks while I completed my first game, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pool_of_Radiance&quot;&gt;Pool of
Radiance&lt;/a&gt;.  When I
finished I had the same “well, that was pointless” moment I always
seem to have when finishing a game, but I didn’t dwell long because
classes started up shortly after.  I’m always amused by how quickly a
game can go from the most important thing in the world to pointless
the moment you complete it.  Of course, it didn’t stop me from immediately
proceeding to &lt;a href=&quot;https://en.wikipedia.org/wiki/Curse_of_the_Azure_Bonds&quot;&gt;Curse of the Azure Bonds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At some point in the fall I came across a Dewdney’s Scientific
American article.  I haven’t read the article since that fall 28 years
ago, but it was the first time I’d heard about cellular automata.
Dewdney described “debris”, and “defects”, and “demons” — all of
which you are probably seeing above this text. As soon as I read that
article I knew I had to build my own simulation environment.  The only
problem was that I had no idea how to program.  I had basic on that
old 286, and believe it or not the computer shipped with a manual on
Basic!  So I set off attempted to build my simulator.  I tried off and
on for about two weeks and got noplace — I could simulate the
evolution rules but I could only display about a 100x100 grid, and
updates were glacial.  It felt like minutes an update.&lt;/p&gt;
&lt;p&gt;The closest thing I had to the internet back then was some local BBS,
and a friendly chap on one of them told me that if I really wanted to
make this work I was going to need to use this language called “c”.
So I set off to learn c.  Local library actually had a reference
manual (I don’t recall what it was, but it wasn’t
K&amp;#x26;R).  The only problem was that I didn’t have a compiler.  I didn’t
even know where I could get a compiler!  The same BBS chap suggested that
there were computer labs at Fresno State with copies of Turbo C.  So I
snuck onto the campus and tried to work out how to program in C.  Progress
was slow, but eventually I found a boxed copy of Turbo C++ in Waldenbooks
of all places.  Once I had a C compiler on my personal computer work
could progress at a reasonable pace.&lt;/p&gt;
&lt;p&gt;Armed with a C compiler, a bit of documentation, and a
dream I set off on one of the most memorable programming
adventures of my life.  I had to figure out compiling, linking, VGA
graphics, and most of all the x86 segmented memory architecture.  I
had to use far pointers to access enough memory to fill up the entire
VGA display, but they were too slow to use for the program code
itself so I ended up writing my first mixed memory mode program as well.
Sometime by Thanksgiving I had written my first program: a replica of
of what Dewdney had described.  Set in a full VGA resolution (640x480)
universe with 16 states.  I sat back and waited for demons to appear.&lt;/p&gt;
&lt;p&gt;I had to wait a while.&lt;/p&gt;
&lt;p&gt;I remember that that computer was insanely loud, I couldn’t really
sleep when it was on.  But it stayed on for several nights, slowly
updating.  At first I thought that I must still have bugs in the
program because there was nothing but randomness — no order was
appearing, and certainly no demons.  But eventually order emerged from
chaos and it was all I was promised. Within a few days I had a screen
full of spiraling demons.&lt;/p&gt;
&lt;p&gt;I had achieved my goal, and it didn’t seem pointless.  I’ve been a
programmer ever since.&lt;/p&gt;
&lt;p&gt;At the top of this page is a recreation of the first program I ever
wrote.  The thing that has me stunned in disbelief is how fast it runs.  There
is no waiting for days to see the emergent order with this simulation!
In fact, if I run it with 16 states like I did in 1989 I have to add
an explicit delay between states to slow it down enough to see the
evolution.  To me, this is jaw dropping.  Even despite the fact
that I’ve been writing high performance code for 25 years or so.
It’s one thing to see galaxy simulations slowly evolve to
higher and higher resolution, but nothing has ever hit me quite like
seeing my first program so fast compared to its first
implementation.&lt;/p&gt;
&lt;p&gt;The implementation on this page is the sloppiest, un-optimized version
that could possibly work.  It slammed together in a few hours.  The fact that
it works, and works well, using an interpreted language in a web browser
is a testament to the progress we’ve made during the last few decades.
I’ll come back to this whenever I feel like lamenting the current state
of our engineering culture.&lt;/p&gt;
&lt;p&gt;In any event, I hope you enjoy my simulator.  The default parameters are set
to recreate what I did back in 1989, but it’s a bit more interesting if you
turn off the frame delay and set it to a large number of states with a
Moore neighborhood.  When set to a large number of states there isn’t always
a configuration in the debris that will get things going, so you may need
to kick it off a few times.  But the resulting fun is worth it.&lt;/p&gt;
&lt;h2&gt;Dynamics&lt;/h2&gt;
&lt;p&gt;The basic dynamics are best described with a series of pictures.  These are for
a Moore neighborhood with 30 states.&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 69.5%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;debris&quot;
        title=&quot;&quot;
        src=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png&quot;
        srcset=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-c0309.png 240w,
/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The initial random state.  Pieces of this initial randomness that survive to
later times are called debris.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.50000000000001%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;droplet-formation&quot;
        title=&quot;&quot;
        src=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png&quot;
        srcset=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-c0309.png 240w,
/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
     &lt;em&gt;Eventually,
some order appears in the form of droplets.  These are large areas
with cells in nearly the same state.  As they expand into the debris
the random values in the debris are occasionally just right to start
converting parts of a droplet, setting off a wave that will traverse
the droplet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;droplet-domination&quot;
        title=&quot;&quot;
        src=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png&quot;
        srcset=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-c0309.png 240w,
/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The droplets expand and consume most of the debris, but no self replicating
structures have been formed yet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.74999999999999%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;spiral-formation&quot;
        title=&quot;&quot;
        src=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png&quot;
        srcset=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-c0309.png 240w,
/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Eventually (always with a large enough simulation) closed loops
are formed, resulting in an expanding and self-renewing spiral.  The first one in this simulation is at the lower left.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72.25%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;spiral-domination&quot;
        title=&quot;&quot;
        src=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png&quot;
        srcset=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-c0309.png 240w,
/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The spirals rapidly expand to fill all space.  The space is then mostly
ordered, but debris like remnants called defects remain indefinitely.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Orientation of the demons&lt;/h2&gt;
&lt;p&gt;It turns out that the orientation of the demons depends on the neighborhood
type being used.&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72.25%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;Moore 25 state spiral&quot;
        title=&quot;&quot;
        src=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png&quot;
        srcset=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-c0309.png 240w,
/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Demon domination, Moore neighborhood, 25 states.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.74999999999999%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;von Neumann 16 state spiral&quot;
        title=&quot;&quot;
        src=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png&quot;
        srcset=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-c0309.png 240w,
/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Demon domination, von Neumann neighborhood, 16 states.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The von Neumann loops are also perfectly valid Moore loops, so if you
flip the neighborhood of a demon dominated von Neumann simulation to
be a Moore neighborhood nothing much will happen.  However, if you
switch a late stage Moore simulation to use von Neumann neighborhoods,
then the demons will reconfigure into diagonal loops.&lt;/p&gt;
&lt;p&gt;Understanding why von Neumann loops are oriented diagonally is
actually pretty strait-forward.  Start with a closed loop like&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Note that this loop is absolutely stable.  No matter what it
encounters in the cells outside of the loop, nothing can disrupt this
loop.  If the cells outside of the loop are debris, the loop will
cycle until it picks up all of the outside cells.  At which point
we’ll &lt;em&gt;probably&lt;/em&gt; have a stable loop that looks like (the configuration
of the second layer isn’t guaranteed, there could be a nearby demon
also influencing those cells)&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The stable closed loop (gray cells) will eventually recruit cells from the debris, and eventually lower row will be as indicated.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At this point, the diagonal spiral structure is already being hinted at, but
if we look at another row (with the stable loop now a bit larger) it becomes
bloody obvious.&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The previously established stable loop (light gray) starts to recruit additional cells.  Now the diagonal pattern is quite clear, and by looking at the cells in
state 1 you can see the first kink where it bends 90 degrees.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To understand the geometry of the Moore neighborhood we just need to realize that
while a Moore simulation &lt;em&gt;could&lt;/em&gt; proceed as above, it’s likely that once the
initial closed loop is formed that it will not recruit new cells precisely
as it did in the von Neumann case — it’s more likely that the first group
of newly recruited cells will looks something like&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Because the Moore neighborhood allows cells to recruit diagonal neighbors,
it’s likely that the initial recruitment will have horizontal and vertical
groups, thus establishing the characteristic orientation of the Moore demons.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;The simulator at the top of this page is a React component.  If you’d like
to experiment with new variations (defining new neighborhoods is always
entertaining) the code is on github at &lt;a href=&quot;https://github.com/dkirkman/ws-demon&quot;&gt;dkirkman/ws-demon&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Wikipedia’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_cellular_automaton&quot;&gt;CCA Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.scientificamerican.com/article/computer-recreations-1989-08/&quot;&gt;“A cellular universe of debris,
droplets, defects and demons”&lt;/a&gt;
Alexander Dewdney, Scientific American,
August 1989&lt;/p&gt;</content:encoded></item></channel></rss>