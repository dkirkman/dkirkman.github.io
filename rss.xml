<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Wild Silicon]]></title><description><![CDATA[David's development blog]]></description><link>https://wildsilicon.com</link><generator>RSS for Node</generator><lastBuildDate>Fri, 22 Jun 2018 01:09:38 GMT</lastBuildDate><item><title><![CDATA[Using emscripten libraries in anger:  notes from the field]]></title><description><![CDATA[Some field notes from using an emscripten compiled c module in a javascript application.  Discussion of efficient c-javascript array passing, restarting the emscripten runtime, and packing the c library to be used in a WebWorker.]]></description><link>https://wildsilicon.com/blog/2018/c-javascript-communication/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/c-javascript-communication/</guid><pubDate>Wed, 20 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a collection of notes from my first few weeks of using
emscripten in earnest.  Specifically, I’ve been compiling an existing
c code base into a library to be used in an existing React
application.  So I’m specifically dealing with issues related to using
emscripten code as a library (as opposed to an entire emscripten
application) in such a way that the calculations are potentially long
running and memory intensive.&lt;/p&gt;
&lt;p&gt;As always, working code associated with this post is available on
&lt;a href=&quot;https://github.com/dkirkman/ws-emscripten-webpack/tree/master/c-javascript-communication&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Efficient array passing&lt;/h2&gt;
&lt;p&gt;The official &lt;a href=&quot;https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/index.html&quot;&gt;docs&lt;/a&gt; do a good job of explaining how to pass
simple primitive arguments — e.g. numbers — and strings.  Passing arrays
is left a little fuzzy.&lt;/p&gt;
&lt;p&gt;The emscripten runtime allocates a contiguous array of bytes for
c-space operations.  Any pointer you pass to a c function is just an
offset into that array of bytes.  It is not possible to pass a
js-space typed array — the standard recommendation is to copy it to
c-space (see this
&lt;a href=&quot;https://github.com/Planeshifter/emscripten-examples/tree/master/01_PassingArrays&quot;&gt;note&lt;/a&gt;
for a typical approach).  However, copying is not &lt;em&gt;required&lt;/em&gt;.  You can
instead allocate the array in c-space, and then construct your
js-space typed array from those bytes.  This allows copy free access
from both js-space and c-space.  The functions I use for this are:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;allocCSpaceArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cSpace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arrayConstructor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ndat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ndat &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arrayConstructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BYTES_PER_ELEMENT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cPtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cSpace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_malloc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jsArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;arrayConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cSpace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;HEAPU8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cPtr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ndat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cPtr&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cPtr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jsArray&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jsArray&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cSpace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cSpace&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;wehre &lt;code class=&quot;language-text&quot;&gt;cSpace&lt;/code&gt; is the emscripten compiled module.  The only downside to this
is that the array needs to be manually freed with&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;freeCSpaceArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cSpace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_free&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cSpace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cPtr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cPtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So the tradeoff with allocating directly in c-space is that you’ve got to
handle freeing the memory manually.  Of course, you also have to manually
free any memory that you allocate when copying a typed array into c-space, but
if you want to it’s easy enough in that case to alloc/use/free in a single
section of code.&lt;/p&gt;
&lt;h2&gt;Restarting the emscripten runtime&lt;/h2&gt;
&lt;p&gt;When using an emscripten module as a library driven by js-space code,
“restarting” the emscripten runtime is a simple as reloading your
emscripten module.  In fact, it’s entirely possible to have several
copies of the runtime going simultaneously.  However, by default each
time you reload your emscripten module you’ll also load/parse/compile
the module’s WebAssembly code.  It is possible to bypass that process
by loading and compiling the WebAssembly yourself, and then passing the
emscripten loader an instance of that WebAssembly. The process would look
something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./build/libTest.wasm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; wasmBytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

WebAssembly&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wasmBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wasmModule &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;instantiateWasm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    WebAssembly&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wasmModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; info&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instance &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;single_run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;loadEmscripten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;asm.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    instantiateWasm&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; instantiateWasm&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                   cspace &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// do something with the emscripten module &lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-text&quot;&gt;loadEmscripten&lt;/code&gt; is your normal emscripten module loader.&lt;/p&gt;
&lt;p&gt;Why would you want to restart the emscripten runtime?  I’ve run into a
problem where I run out of memory while allocating c arrays.  If
you’ve configured emscripten to grow memory on demand, by the time
that c-space memory allocations fail the emscripten (or rather
WebAssembly) heap may be (and in my case &lt;em&gt;was&lt;/em&gt;) consuming most of the
memory available to your javascript engine.  Because the WebAssembly
heap can be grown but it can not be reduced, simply &lt;code class=&quot;language-text&quot;&gt;_free&lt;/code&gt;ing your
pointers in c-space wont free up any memory for javascript.  The only
thing you can do is to dispose (e.g. loose references to and allow it
to be garbage collected) of the c runtime.&lt;/p&gt;
&lt;p&gt;As far as timing is concerned, instantiating a new emscripten module from
pre-compiled WASM takes about 2ms on my machine (mid 2016 macbook pro).
Compiling WASM in the first place takes 10-100 ms for the modules I’ve been
working with, which range from about 10 lines of c to 12k lines of c.&lt;/p&gt;
&lt;h2&gt;Threads&lt;/h2&gt;
&lt;p&gt;By using &lt;tt&gt;-s USE_PTHREADS=1&lt;/tt&gt; you can enable pthread support in
emscripten.  I have been unable to make this work anyplace but node,
presumably because all browsers have disabled &lt;code class=&quot;language-text&quot;&gt;SharedArrayBuffer&lt;/code&gt; in
response to spectre.  (Mitigating spectre has also cost us high
resolution timers in the browser, garrrh).  The only luck I’ve had is
to put the c-runtime in it’s own WebWorker and use js-space
communication back to the main thread.&lt;/p&gt;
&lt;p&gt;It also turns out that neither WebAssembly or emscripten modules seem
to implement &lt;tt&gt;Transferable&lt;/tt&gt;, so I’ve ended up having each
WebWorker compile and instantiate it’s own c-space runtime.  This
isn’t ideal, but so far it’s only costing me ~50ms, so I haven’t
worked out a better solution yet.  However, because the c libraries I’ve
been bringing onto the client via emscripten have long runtimes, I’ve taken
to running them in a webWorker by default.&lt;/p&gt;
&lt;p&gt;I’ve modified the code from my last &lt;a href=&quot;../emscripten-webpack/&quot;&gt;post&lt;/a&gt; to
run in WebWorkers (code &lt;a href=&quot;https://github.com/dkirkman/ws-emscripten-webpack/tree/master/c-javascript-communication&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;blog-c-javascript-communication reactclass=&quot;AddValues&quot;&gt;
&lt;/blog-c-javascript-communication&gt;
&lt;blog-c-javascript-communication asmjs=&quot;true&quot; reactclass=&quot;AddValues&quot;&gt;
&lt;/blog-c-javascript-communication&gt;
&lt;p&gt;The changes required to use it in a &lt;code class=&quot;language-text&quot;&gt;Worker&lt;/code&gt; are relatively minor.  The most
important one is to tell webpack to build a bundle meant to be loaded as a
webworker, which will prevent references to &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; and such (generally replacing with references to &lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt;).  This is done by changing the &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt; property
in &lt;tt&gt;webpack.config.js&lt;/tt&gt; to &lt;tt&gt;‘webworker’&lt;/tt&gt; like so&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  target&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;webworker&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;onclick&lt;/code&gt; implementation in &lt;tt&gt;AddValues.jsx&lt;/tt&gt;
actually gets a bit cleaner using a WebWorker,
all it has to do is create the &lt;code class=&quot;language-text&quot;&gt;Worker&lt;/code&gt;, send it an initialization message,
and update the component state when we get a response&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; worker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; emcc_options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;asm.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asmjs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token string&quot;&gt;&apos;url_prefix&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emcc_options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The only other thing to do is to make &lt;tt&gt;index.mjs&lt;/tt&gt; a simple script
instead of an ES6 module.  Again, the only thing it does is listen for
an initialization message, and when it gets it load the emscripten code
and return the result&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; LoadEmscripten &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./LoadEmscripten.mjs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;LoadEmscripten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cspace &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cspace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_add_values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The main ES6 module has been moved to &lt;tt&gt;LoadEmscripten&lt;/tt&gt;, where it is
otherwise the same as it was.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Making emscripten, webpack, and node.js work together]]></title><description><![CDATA[Using a single code base and emscripten to make a c or c++  library available to both node.js and webpack is not entirely  trivial.  I've set up a simple repository that does exactly that, and is configured to dynamically load either the WebAssembly or  AsmJS version of the native code.]]></description><link>https://wildsilicon.com/blog/2018/emscripten-webpack/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/emscripten-webpack/</guid><pubDate>Tue, 12 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’ve recently started using emscripten to make some legacy c++ code
available in javascript as a library — the main part of my
application is still javascript, but I’m making calls into and out
of the c++ code.  While there seems to be extensive documentation
related to building an entire application (e.g. a game) via
emscripten, getting everything setup to use native code as a library
turned out to take a bit of doing.  If this matches your use case,
read on.&lt;/p&gt;
&lt;p&gt;My goal is to have boilerplate that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Builds the c or c++ code with standard build tools, which in my
case means cmake.  Separate compilation and incremental builds are
essential here, especially for c++.&lt;/li&gt;
&lt;li&gt;Produces output that can be directly consumed by node.&lt;/li&gt;
&lt;li&gt;Produces output that can be webpacked into a reasonable bundle.&lt;/li&gt;
&lt;li&gt;Produces both AsmJS and WebAssembly versions of the native code.&lt;/li&gt;
&lt;li&gt;Loads &lt;em&gt;either&lt;/em&gt; the AsmJS or WebAssembly version of the code, but
not both.  I want the ability to only send what will be required for
execution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve made a &lt;a href=&quot;https://github.com/dkirkman/ws-emscripten-webpack&quot;&gt;repo&lt;/a&gt;
that accomplishes all of the above.  To use the repo, &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; will
produce the AsmJS and WebAssembly code.  &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; will produce
a bundle suitable for embedding in a browser, as I’ve done at the bottom
of this page.&lt;/p&gt;
&lt;p&gt;The repo is laid out with the c code and javascript module that provides
access to it in the &lt;tt&gt;src&lt;/tt&gt; directory.  &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; will compile the c code
and move a copy of the javascript code to the &lt;tt&gt;build&lt;/tt&gt; directory, where
it can be directly consumed by node.  &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; will package the
contents of &lt;tt&gt;build&lt;/tt&gt; into &lt;tt&gt;dist&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The basic steps operate as follows.&lt;/p&gt;
&lt;h2&gt;Compilation of c to LLVM bitcode&lt;/h2&gt;
&lt;p&gt;This is accomplished entirely via CMake, which is configured by the
&lt;tt&gt;CMakeLists.txt&lt;/tt&gt; files in the root and &lt;tt&gt;src&lt;/tt&gt; directories.
The &lt;tt&gt;build&lt;/tt&gt; target in the &lt;tt&gt;Makefile&lt;/tt&gt; will create the
&lt;tt&gt;build&lt;/tt&gt; directory, and use &lt;tt&gt;cmake&lt;/tt&gt; and &lt;tt&gt;emconfigure&lt;/tt&gt;
to generate makefiles.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;build:
	mkdir build
	cd build; emconfigure cmake ../&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;tt&gt;make&lt;/tt&gt; uses &lt;tt&gt;emmake&lt;/tt&gt; and &lt;tt&gt;make&lt;/tt&gt; to actually build
the native libraries.  This is trivial for this simple boilerplate, but for
large applications this is a full incremental build system.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;make: build
	cd build; emmake make&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;LLVM bitcode to AsmJS and WebAssembly&lt;/h2&gt;
&lt;p&gt;This occurs via the &lt;tt&gt;build/libTest.js&lt;/tt&gt; and
&lt;tt&gt;build/libTestAsm.js&lt;/tt&gt; targets.  I just use emscripten to
transform the LLVM bitcode in &lt;tt&gt;build/libTest.a&lt;/tt&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;build/libTest.js: build/src/libTest.a
	emcc -s WASM=1 -s MODULARIZE=1 build/src/libTest.a -o build/libTest.js

build/libTestAsm.js: build/src/libTest.a
	emcc -s WASM=0 -s MODULARIZE=1 build/src/libTest.a -o build/libTestAsm.js&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Javascript to dynamically load the emscripten code&lt;/h2&gt;
&lt;p&gt;This is where it gets tricky, because I want the module to work with both
node.js and webpack.  For dynamic loading to work with webpack, we’ve got
to either load the emscripten code with the old &lt;tt&gt;require.ensure()&lt;/tt&gt;
or use dynamic &lt;tt&gt;import&lt;/tt&gt; from ES6 modules.  Making one of those work
with node is going to involve either a transpiling step for node, or using
a very recent version of node with experimental support for ES6 modules.&lt;/p&gt;
&lt;p&gt;I’m relying on node support for ES6 modules to make this work.  To enable
this, we have to invoke node like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node --experimental-modules&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;For reasons I don’t entirely understand, node only supports ES6 modules in
files with an &lt;tt&gt;.mjs&lt;/tt&gt; extension. &lt;tt&gt;.js&lt;/tt&gt; files will not work.
Thus, the main interface to the module is &lt;tt&gt;src/index.mjs&lt;/tt&gt;.
&lt;tt&gt;src/index.mjs&lt;/tt&gt; defines a default export that’s a function which
takes some configuration options and a callback, then loads the emscripten
code and calls the callback.  The money section looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;   &lt;span class=&quot;token function&quot;&gt;module_options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url_prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mopts &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;libTest&quot; */&lt;/span&gt; 
        &lt;span class=&quot;token string&quot;&gt;&apos;./libTest.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;module &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mopts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cspace &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cspace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that that while the &lt;tt&gt;—experimental-modules&lt;/tt&gt; has been in node
since version 8.5, it looks like dynamic imports are only recently supported.
I’m using node 10.4.0.&lt;/p&gt;
&lt;p&gt;Also note using a callback after loading the emscripten generated code
isn’t just a stylistic choice.  The emscripten generated modules are
“promise-like” in the sense that they have a then method — but
because they have a &lt;tt&gt;then&lt;/tt&gt; method they can’t actually be
returned as the value of a promise.  Any attempt to do so will just
result in an infinite &lt;tt&gt;then&lt;/tt&gt; loop as the promise tries to get
resolved.  Therefore, if you want to make the interface module return one
of the emscripten modules directly, you’ve got to either wrap it in something
without a &lt;tt&gt;then&lt;/tt&gt; method, or you’ve got to use a callback.  I’ve
decided to use a callback.&lt;/p&gt;
&lt;p&gt;Another key part of &lt;tt&gt;src/index.mjs&lt;/tt&gt; is that if we are going to use
WebAssembly, the emscripten module itself loads the WebAssembly file.  So
we need to tell emscripten where it is.  This occurs in the
&lt;tt&gt;module_options&lt;/tt&gt;promise where we eventually return&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locateFile&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.wasm&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url_prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Which works out if we are in node or a browser, and then either returns a
file path or url.  The &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; itself also depends on the execution context.
For node, it’s just &lt;tt&gt;libTest.wasm&lt;/tt&gt;.  For a browser environment however,
we want webpack to include a cache-busting hash to the filename, so we don’t
actually know what the file name is going to be.  However, we can ask
webpack to “import” the wasm file, and that will resolve to a string
containing the actual hash-containing url.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; wasm_name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nodep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;libTest.wasm&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* webpackChunkName: &quot;wasmName&quot; */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./libTest.wasm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The dynamic import of &lt;tt&gt;libTest.wasm&lt;/tt&gt; won’t work at all in node, but
it’s never executed in a node environment, so no harm no foul.&lt;/p&gt;
&lt;p&gt;At this point, everything is in place to use the module with node.  In the
root of the repo is a simple test program named &lt;tt&gt;node-main.mjs&lt;/tt&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ttest &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./build/index.mjs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;ttest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;asm.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cspace &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;33 + 55 is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cspace&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_add_values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To run it you just need to&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node --experimental-modules node-main.mjs&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Webpack’n for use in a browser&lt;/h2&gt;
&lt;p&gt;Most of the work to get webpack to produce dynamically loaded modules was
done in the design of the interface module &lt;tt&gt;src/index.js&lt;/tt&gt;.  By using
dynamic imports for both &lt;tt&gt;libTest.js&lt;/tt&gt; and &lt;tt&gt;libTestAsm.js&lt;/tt&gt;
we ensure just the one we ask for will be loaded.&lt;/p&gt;
&lt;p&gt;If fact, we can almost get away with default webpack behavior.  But not quite:
my &lt;tt&gt;webpack.config.js&lt;/tt&gt; has a couple of important tweaks.  First
of all, I want to encode the wasm filename with a hash, this is done with&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  module: {
    rules: [
      { 
        test: /\.wasm$/,
        type: &amp;#39;javascript/auto&amp;#39;,
        loader: &amp;#39;file-loader&amp;#39;,
        options: {
          name: &amp;#39;[name]-[hash].[ext]&amp;#39;,         
        }        
      }
    ]
  },&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The second webpack tweak is that by default it seems to think that when it’s
dealing with &lt;tt&gt;.mjs&lt;/tt&gt; files that it’s going to be targeting node
(presumably because the &lt;tt&gt;.mjs&lt;/tt&gt; extension is not used by anybody else).&lt;/p&gt;
&lt;p&gt;To convince webpack to produce a bundle without references to various node things, I’ve got the following section&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; target: &amp;#39;web&amp;#39;,
  node: {
    __dirname: false,
    fs: &amp;#39;empty&amp;#39;,
    Buffer: false,
    process: false
  }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;With that in place, webpack produces:&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-54585.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 960px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 49.921996879875195%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;emscripten-build&quot;
        title=&quot;&quot;
        src=&quot;/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-c83f1.png&quot;
        srcset=&quot;/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-569e3.png 240w,
/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-93400.png 480w,
/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-c83f1.png 960w,
/static/emscripten-build-05166a2a1d20122fa602cb574a710d09-54585.png 1282w&quot;
        sizes=&quot;(max-width: 960px) 100vw, 960px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    &lt;/p&gt;
&lt;p&gt;&lt;tt&gt;dist/index.js&lt;/tt&gt; is the main entry point, everything else is
dynamically loaded as needed.  If you’re wondering about the sizes,
&lt;tt&gt;libTestAsm&lt;/tt&gt; contains both AsmJS code &lt;em&gt;and&lt;/em&gt; the emscripten c
runtime.  &lt;tt&gt;libTest&lt;/tt&gt; just contains the emscripten c runtime,
and loads the actual library code from &lt;tt&gt;libTest-[hash].wasm&lt;/tt&gt;&lt;/p&gt;
&lt;h2&gt;Live results&lt;/h2&gt;
&lt;p&gt;I’ve embedded the webpack bundle into this page.  If you push one of
the buttons below, it will load the appropriate library on do the
calculation.  If you look at what your browser is downloading and when (e.g.
from the network tab in the chrome developer tools) you can observe
the libraries being loaded on demand.&lt;/p&gt;
&lt;blog-emscripten-webpack reactclass=&quot;AddValues&quot;&gt;
&lt;/blog-emscripten-webpack&gt;
&lt;blog-emscripten-webpack reactclass=&quot;AddValues&quot; asmjs=true&gt;
&lt;/blog-emscripten-webpack&gt;</content:encoded></item><item><title><![CDATA[Getting started with WebGL:  boilerplate for a world]]></title><description><![CDATA[Hello world, WebGL edition.  Because you can't very well say hello without a world.  Provides some basic boilerplate for playing around with 3d objects, focusing on GLSL shaders.]]></description><link>https://wildsilicon.com/blog/2018/hello-gl/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/hello-gl/</guid><pubDate>Thu, 31 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;blog-hello-gl reactclass=&quot;HelloGL&quot; meshsize=&quot;30&quot;
               use_textured_earth=&quot;true&quot; lighting=&quot;directional&quot;&gt;
&lt;/blog-hello-gl&gt;&lt;/p&gt;
&lt;p&gt;This is quite literally “Hello World” implemented in WebGL.  I
recently became acquainted with WebGL through the Mozilla
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial&quot;&gt;tutorials&lt;/a&gt;,
but this is the example program I wish I had when I was going through
that.  It’s small enough to be understandable in a short amount of
time, but substantial enough to serve as boilerplate for considerable
further exploration.  In particular, the shaders are just complicated
enough to demonstrate some key principles.&lt;/p&gt;
&lt;p&gt;This kind of example is especially useful for WebGL, because typically
if you make an error in graphics programming you don’t get a nice error
message, or a stack trace.  All you usually get is a blank screen.  So
personally, I’ve found this program — which allows me to switch between
texturing or not texturing the object and switch between uniform and
directional lighting — to be quite useful when debugging various
3d objects I’ve been working on.&lt;/p&gt;
&lt;p&gt;The code for this hello world is on
&lt;a href=&quot;https://github.com/dkirkman/ws-hello-gl&quot;&gt;github&lt;/a&gt;.  That repo contains
both vanilla JS for hello world, and encapsulates it in a react
component — which is how it’s actually served on this page.  See the
repository page for details on how to use it as a react component.&lt;/p&gt;
&lt;p&gt;Before I start describing the code I should note that I’m rather new
to WebGL.  I’ve done a lot of work with OpenGL, and with
&lt;a href=&quot;https://en.wikipedia.org/wiki/PHIGS&quot;&gt;PHIGS&lt;/a&gt; before that, but not much
in the last decade.  So my work with WebGL and “modern” shaders is
only a few months old.  However, if you’re seeing a spinning globe
above you know the code works, even if my description of why it works
is a little off!&lt;/p&gt;
&lt;p&gt;The entry point to the code &lt;tt&gt;hello_world&lt;/tt&gt;, and it takes as parameters
the DOM object (usually a &lt;tt&gt;div&lt;/tt&gt;) to place the GUI controls in,
a canvas to render the WebGL into, and some initial values for various
parameters.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;controlDiv&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lighting&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     useTexture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; gl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initWebGL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canvas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programInfo 
          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initProgramInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vertexShaderSource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                            fragmentShaderSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; programInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                          lighting&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useTexture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initGUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; controlDiv&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;loadTexture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token string&quot;&gt;&apos;land_ocean_ice_cloud_2048.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    texture &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;helloWorldAnimationLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; texture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;tt&gt;hello_world&lt;/tt&gt; just initializes everything used in the demo,
and then ends by calling &lt;tt&gt;loadTexture&lt;/tt&gt;
to load an image of the Earth, and when it’s ready to jump into
the main animation loop.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;loadTexture&lt;/tt&gt; is just a slightly modified version of the code
used in the Mozilla
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL&quot;&gt;tutorial&lt;/a&gt; on textures — look there
for details on how it works.&lt;/p&gt;
&lt;p&gt;The earth image used as a texture is
&lt;a href=&quot;https://eoimages.gsfc.nasa.gov/images/imagerecords/57000/57735/land_ocean_ice_cloud_2048.jpg&quot;&gt;land_ocean_ice_cloud_2048.jpg&lt;/a&gt;.
It’s part of NASA’s Visible Earth project.  Mission details, additional
formats and sizes, and Terms of Use (basically, anything goes as long
as you credit NASA) can be found
&lt;a href=&quot;https://visibleearth.nasa.gov/view.php?id=57735&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the texture loaded, we enter the main animation loop, which
is where all of the rendering actually takes place. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;helloWorldAnimationLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; texture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; time_start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// First time through, set parameters for gl.clear&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clearColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clearDepth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                 
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEPTH_TEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;           
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;depthFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LEQUAL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time_now&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; delta_time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time_now &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; time_start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; delta_time&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
    gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;COLOR_BUFFER_BIT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEPTH_BUFFER_BIT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
    
    &lt;span class=&quot;token function&quot;&gt;drawObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;distance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
               params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;phi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; theta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multipleEarth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;drawAdditionalEarths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; theta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Kick it off the first time&lt;/span&gt;
  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;The action &lt;tt&gt;helloWorldAnimationLoop&lt;/tt&gt; takes place in
&lt;tt&gt;drawObject&lt;/tt&gt;, which we’ll get to shortly.  But before we
do that we should look a bit more closely at the initialization code,
because I think that’s where the most important concepts are located.&lt;/p&gt;
&lt;p&gt;Initializing WebGL is quite straightforward, all you need is a canvas.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initWebGL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canvas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; gl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;webgl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;can&apos;t find any webgl -- &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 
                &lt;span class=&quot;token string&quot;&gt;&quot;this is not going to work&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Your browser does not support WebGL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I’m putting everything configurable into an easy to pass around
object, it’s built up with &lt;tt&gt;initParams&lt;/tt&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; programInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lighting&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                    useTexture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;useTexture&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; useTexture&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                multipleEarth&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                lighting&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lighting&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                meshSize&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                distance&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                phi&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                obj&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeSphere&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                programInfo&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; programInfo
               &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;tt&gt;initGUI&lt;/tt&gt; initializes the
&lt;a href=&quot;https://github.com/dataarts/dat.gui&quot;&gt;&lt;tt&gt;dat.gui&lt;/tt&gt;&lt;/a&gt; GUI.  It’s not
all that interesting.  But it is sort of essential to make the code actually
interactive.  For details look in the repo.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;initProgramInfo&lt;/tt&gt; is probably the most important piece
of this program to truly understand.  At first glance, it looks
straightforward:  it creates a WebGL program from source for
a vertex and fragment shader, and then creates an object with that
program and some precomputed “locations”.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initProgramInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vertexSource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fragmentSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shaderProgram &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initShaderProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vertexSource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                                          fragmentSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    program&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    attribLocations&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      vertexPosition&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                                           &lt;span class=&quot;token string&quot;&gt;&apos;aVertexPosition&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      vertexNormal&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                                         &lt;span class=&quot;token string&quot;&gt;&apos;aVertexNormal&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      textureCoord&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                                         &lt;span class=&quot;token string&quot;&gt;&apos;aTextureCoord&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      vertexColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;token string&quot;&gt;&apos;aVertexColor&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    uniformLocations&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      projectionMatrix&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUniformLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                              &lt;span class=&quot;token string&quot;&gt;&apos;uProjectionMatrix&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUniformLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                             &lt;span class=&quot;token string&quot;&gt;&apos;uModelViewMatrix&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      normalMatrix&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUniformLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                          &lt;span class=&quot;token string&quot;&gt;&apos;uNormalMatrix&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      directionalLighting&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUniformLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                                 &lt;span class=&quot;token string&quot;&gt;&apos;uDirectionalLighting&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      useTexture&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUniformLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shaderProgram&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;token string&quot;&gt;&apos;uUseTexture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; programInfo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;A key thing to recognize is that the &lt;tt&gt;attribLocations&lt;/tt&gt; and
&lt;tt&gt;uniformLocations&lt;/tt&gt; correspond to variables in the shaders, and
binding arrays to those locations is how we are going to communicate
with the shaders.&lt;/p&gt;
&lt;h2&gt;Shaders&lt;/h2&gt;
&lt;p&gt;If you’re not already familiar with how WebGL shaders work, the 30
second description is this.  When rendering a scene, the first thing
that happens is that the vertex shader is called for each vertex.  You
pass information to the vertex shader via &lt;tt&gt;uniformLocations&lt;/tt&gt;
for things that are constant for each vertex, and via
&lt;tt&gt;attribLocations&lt;/tt&gt; for things that are unique to each vertex.
Things that are unique to each vertex are things like vertex positions,
colors, texture coordinates, etc.&lt;/p&gt;
&lt;p&gt;To actually fill in a triangle, after the vertex shader has computed
various values for each vertex, those values are interpolated between
the vertices and passed to a fragment shader, which is called once
for each pixel in the triangle.  We’ll return to fragment shaders
shortly.&lt;/p&gt;
&lt;p&gt;The vertex shader for this program is embedded in the javascript code
as a string literal.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; vertexShaderSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`
    attribute vec3 aVertexNormal;
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aVertexColor;

    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;
    uniform mat4 uNormalMatrix;

    uniform float uDirectionalLighting;

    varying highp vec3 vLighting;
    varying highp vec2 vTextureCoord;
    varying highp vec4 vColor;

    void main() {
      gl_Position =   uProjectionMatrix * uModelViewMatrix 
                    * vec4(aVertexPosition, 1);

      if (uDirectionalLighting &gt; 0.0) {
         highp vec3 ambientLight = vec3(0.1, 0.1, 0.1);
         highp vec3 directionalLightColor = vec3(1, 1, 1);
         highp vec3 directionalVector 
            = normalize(vec3(1.0, 0.3, 0.5));

         highp vec4 transformedNormal 
            = uNormalMatrix * vec4(aVertexNormal, 1.0);

         highp float directional = max(
            dot(transformedNormal.xyz, directionalVector), 
            0.0
         );

         vLighting = ambientLight 
                   + (directionalLightColor * directional);
      } else {
         vLighting = vec3(1.0, 1.0, 1.0);
      }

      vTextureCoord = aTextureCoord;
      vColor = aVertexColor;
    }
  `&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The shader is written in
&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenGL_Shading_Language&quot;&gt;GLSL&lt;/a&gt;.  It you
know a c-like language (e.g. javascript!) it should be pretty easy to
understand what’s going on.  For a high level understanding, the key
thing to look at are the Hungarian style variable definitions at the
top of the shader.&lt;/p&gt;
&lt;p&gt;We’ve already briefly discussed the &lt;tt&gt;attrib&lt;/tt&gt; and &lt;tt&gt;uniform&lt;/tt&gt;
definitions — they
are the way we get information into the vertex shader.  The &lt;tt&gt;varying&lt;/tt&gt;
definitions are how we communicate between the vertex and fragment shaders.
They get computed at each vertex, and when each pixel is rendered by the
fragment shader the &lt;tt&gt;varying&lt;/tt&gt; parameters are interpolated between
the various indices in the triangle.&lt;/p&gt;
&lt;p&gt;Also of note is the setting of &lt;tt&gt;gl_Position&lt;/tt&gt;.  That is a magic
variable that needs to be set for each vertex describing where exactly
to place the vertex in screen coordinates.&lt;/p&gt;
&lt;p&gt;The fragment shader looks like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fragmentShaderSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`
    varying highp vec3 vLighting;
    varying highp vec2 vTextureCoord;
    varying highp vec4 vColor;

    uniform sampler2D uSampler;
    uniform lowp float uUseTexture;

    void main() {
      highp vec4 color;
      if (uUseTexture &gt; 0.0) {
         color = texture2D(uSampler, vTextureCoord);
      } else {
         color = vColor;
      }

      gl_FragColor = vec4(color.rgb * vLighting, color.a);
    }
  `&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;it receives &lt;tt&gt;varying&lt;/tt&gt; parameters from the vertex shaders,
and &lt;tt&gt;uniform&lt;/tt&gt; that don’t vary for any pixel, in this case
whether or not we should use a texture at all (&lt;tt&gt;uUseTexture&lt;/tt&gt;),
and if we should use a texture there is a parameter to actually sample
it (&lt;tt&gt;uSampler&lt;/tt&gt;)&lt;/p&gt;
&lt;p&gt;Like &lt;tt&gt;gl_Position&lt;/tt&gt;
in the vertex shader,
&lt;tt&gt;gl_FragColor&lt;/tt&gt;
sets the key output of a fragment shader — the color of the pixel being
rendered.&lt;/p&gt;
&lt;p&gt;This fragment shader has some simple logic to use a &lt;tt&gt;uniform&lt;/tt&gt;
to switch between rendering based on a texture or based on the underlying
vertex colors.&lt;/p&gt;
&lt;h2&gt;Constructing a Sphere&lt;/h2&gt;
&lt;p&gt;The code above will display any object, as long as the object defines
positions, normals, colors, and textureCoords for it’s constituent
triangles.  The spheres displayed by &lt;tt&gt;hello_world&lt;/tt&gt; are constructed
like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeSphere&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; positions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; colors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; normals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; indices &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; textureCoords &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;meshSize&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;meshSize&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; long &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;meshSize&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token function&quot;&gt;setPositions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;positions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; long&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setNormals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;normals&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; long&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setTextureCoords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;textureCoords&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                       meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setColors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token function&quot;&gt;setIndices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; meshSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; indexBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bindBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ELEMENT_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; indexBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bufferData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ELEMENT_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint16Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;STATIC_DRAW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;vertexBuffer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindFloatBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; positions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          colorBuffer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindFloatBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; colors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          normalBuffer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindFloatBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; normals&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          indexBuffer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; indexBuffer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          textureBuffer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindFloatBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; textureCoords&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          vertexCount&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; indices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;It’s a bit long, but fundamentally not too complicated.  We just iterate
over squares in latitude/longitude, and tile each square
with two triangles.  Even though we could share vertices between the
triangles, in this case we do not.  By having a unique vertex for each
corner of each triangle, we can alternate the color of the triangles and
make the mesh easy to visualize.  The visualization is not so interesting
for the completed sphere, but it was mighty handy when I screwed up the
first few versions of &lt;tt&gt;makeSphere&lt;/tt&gt;!&lt;/p&gt;
&lt;p&gt;The structure of setting two triangles to cover each latitude/longitude
rectangle is obvious in the code that assigns the positions and normals&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setPositions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;positions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; long&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  positions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setNormals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;normals&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; long&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;long&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  normals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the case of a unit sphere, the unit normals just &lt;em&gt;happen&lt;/em&gt; to
be the same as the vertex positions, but of course that won’t be
the case for anything that isn’t a unit sphere.&lt;/p&gt;
&lt;p&gt;Because out texture image is a flattened sphere, the texture coordinates
of each vertex map directly onto the image&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTextureCoords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;textureCoords&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nlong&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nlat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  textureCoords&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nlong&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  textureCoords&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nlat&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  textureCoords&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nlong&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  textureCoords&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nlat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that while each position requires 3 elements, the texture coordinates only
set 2 elements.  How does WebGL work out that the positions and normals
effectively have different strides?  It’s done when we bind the attributes
before rendering — we’ll have an opportunity to set the stride for each
array then.&lt;/p&gt;
&lt;p&gt;Also Note that &lt;tt&gt;makeSphere&lt;/tt&gt; binds its vertex data into WebGL
buffers.  If you don’t want to run out of GPU memory (I’m pretty sure
you don’t) you need to free those buffers if you get rid of your
object.  &lt;tt&gt;hello_world&lt;/tt&gt; uses the following little helper for this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;deleteObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vertexBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colorBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;normalBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indexBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textureBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I’ve glossed over some very basic WebGL concepts like the modelViewMatrix
and the normalMatrix.  Those are, of course, essential to understand in the
long run, but at the start of a 3d journey I think they’re not terribly
important.  All you’ve got to know is that for viewing “standard objects”,
you just translate and rotate the modelViewMatrix like we do in
&lt;tt&gt;drawObject&lt;/tt&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;drawObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset_y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                    offset_z&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; phi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; theta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; modelViewMatrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mat4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  mat4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     
                 modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     
                 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset_y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset_z&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  
  mat4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; phi&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;180.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  mat4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              theta&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;bindAndRender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;tt&gt;bindAndRender&lt;/tt&gt; just binds the uniforms and attributes, and then
does the actual drawing&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindAndRender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;programInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;program&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;bindAttribs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;bindUniforms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; modelViewMatrix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNSIGNED_SHORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;drawElements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRIANGLES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vertexCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                    offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I may write another post about the modelViewMatrix, but for the moment
if you want to understand it better I’d head to the Mozilla
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s about it.  For the full source grab the github
&lt;a href=&quot;https://github.com/dkirkman/ws-hello-gl&quot;&gt;repo&lt;/a&gt;.  (Note that if you
want to play with this you &lt;em&gt;must&lt;/em&gt; grab a copy of the repo — the
snippets on this page do not include some not very interesting but
utterly essential routines!) If your WebGL journey is still in its
early days, I think it’s an excellent example to play around with.
Have fun!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Interactive Munker-White illusion]]></title><description><![CDATA[Demonstration that a single color can be perceived quite differently depending on what it's surrounded with.]]></description><link>https://wildsilicon.com/blog/2018/munker-illusion/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/munker-illusion/</guid><pubDate>Wed, 23 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;noscript&gt;
Munker Illusion requires javascript (sorry!)
&lt;/noscript&gt;
&lt;blog-munker-illusion reactclass=&quot;MunkerIllusion&quot;
                      background=&quot;blue&quot; bar=&quot;yellow&quot; grating=&quot;red&quot;&gt;
&lt;/blog-munker-illusion&gt;
&lt;p&gt;While writing my last &lt;a href=&quot;/blog/2018/cyclical-colormaps/&quot;&gt;post&lt;/a&gt;
I was reminded of two interesting aspects of psychophysics: color
perception depends to a large degree on surrounding colors, and color
perception is different on large and small spatial scales.  These
effects combined are the basis of the Munker-White illusion.&lt;/p&gt;
&lt;p&gt;In the image/widget above there are only three colors.  The background
is a alternating series of yellow and then blue constant width
stripes.  Over the background are two red gratings — the width of the
gratings exactly matches the width of the background stripes.  On the
left, the grating is aligned such that it obscures the yellow stripes
and allows the blue stripes to shine through.  On the right, the
grating is aligned to obscure the blue stripes.&lt;/p&gt;
&lt;p&gt;With the initial parameters, most people will perceive the colors of
the two red gratings too be distinctly different.  To me it looks
redish, perhaps a bit magentaish on the left, and orangish on the
right.  The two gratings, of course, have identical colors.  To see
this, play with the background slider and take the background to
white.  If you don’t believe me, the
&lt;a href=&quot;https://github.com/dkirkman/ws-munker-illusion&quot;&gt;code&lt;/a&gt; for the
illusion is on github.&lt;/p&gt;
&lt;p&gt;What is going on?  At first glance, you might imagine that somehow the
colors are combining — the blue and red combine to make purple and
the red and yellow combine to make orange.  If you make the stripes
small enough, that is exactly what is going on.  In the widget above
the smallest you can make the stripes is one pixel, which depending on
the DPI and viewing distance to your display may be enough.  But even
if your eyesight is sufficient to resolve the 1 pixel stripes,
combining colors (e.g. red and green to make yellow) is exactly what
is going on at the subpixel level of your display.&lt;/p&gt;
&lt;p&gt;But what’s going on in this illusion is different: the color shift
occurs even when the stripes are quite wide.  And the magnitude of the
color shift depends on how wide the stripes are — if you use the
slider to adjust the stripes to be wide enough the color shift will
disappear entirely.  Adjust the strip width to a point where the
stripes are as wide as possible but you still see a color shift.  The
trippy thing is that color shift is uniform across the red grating
elements: it’s not like it is more pronounced near the edges.&lt;/p&gt;
&lt;p&gt;Again, what’s going on here?  It turns out that nobody really knows.
Wikipedia has
&lt;a href=&quot;https://en.wikipedia.org/wiki/White%27s_illusion&quot;&gt;explanations&lt;/a&gt; of
what’s &lt;em&gt;not&lt;/em&gt; going on and several theories about what &lt;em&gt;might&lt;/em&gt; be a
correct explanation.  But at the moment, this is an unsolved problem.&lt;/p&gt;
&lt;p&gt;Perception is tricky.  Psychophysics is at the intersection of
physics, biology, and information theory.  It’s messy.
Roughly 30% of our cortex is dedicated to processing visual
information. This is why visualization so powerfully helps us
understand data — it quite literally allows us to use more of our
brain.  But we can’t feed it arbitrary input and expect it to make
sense of that input for us.&lt;/p&gt;
&lt;p&gt;Our visual system is designed to make sense of a rainforest or
savanna.  To build a 3d mental model of the world that we can
navigate.  Our primate heritage means that our color perception is
probably geared towards finding ripe fruit and avoiding dangerous
critters — and to do so in a variety of lighting conditions.  It just
speculation of course, but it strongly seems that we are wired to see
“red” fruit as red, no matter what the physics of the illumination
happens to be at the moment.  What matters isn’t so much the spectrum
of the reflected light, but the spectrum &lt;em&gt;relative&lt;/em&gt; to the foliage
around the fruit.  Psychophysics is fun, but psychophysics is
complicated.&lt;/p&gt;
&lt;p&gt;We should always keep this in mind when designing visualization.  Our
visual cortex brings tremendous processing power and modeling ability
to help us understand our data.  But if we feed it unnatural scenes
it’s not likely to behave as we expect.&lt;/p&gt;
&lt;p&gt;This illusion is not a color-only affect, the original
White illusion (minus Munker!) is just grayscale.  It’s reproduced
below.&lt;/p&gt;
&lt;p&gt;One last thing: what color was the
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_dress&quot;&gt;dress&lt;/a&gt; again?&lt;/p&gt;
&lt;noscript&gt;
Munker Illusion requires javascript (sorry!)
&lt;/noscript&gt;
&lt;blog-munker-illusion reactclass=&quot;MunkerIllusion&quot;
                      background=&quot;black&quot; bar=&quot;white&quot; grating=&quot;gray&quot;&gt;
&lt;/blog-munker-illusion&gt;</content:encoded></item><item><title><![CDATA[Constructing a cyclical colormap]]></title><description><![CDATA[Designing an effective cyclical colormap is a bit tricky.  Can the recent trend of using perceptually uniform colorspaces produce a cyclical map that is both compelling and capable of discerning small features?]]></description><link>https://wildsilicon.com/blog/2018/cyclical-colormaps/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/cyclical-colormaps/</guid><pubDate>Thu, 17 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last &lt;a href=&quot;/blog/2018/demon/&quot;&gt;post&lt;/a&gt; I gave the option of using a
variety of different colormaps.  The reason is because historically
I’ve always favored plain grayscale colormaps.  I’ve always found that
“color” colormaps grossly distort my data &lt;em&gt;and&lt;/em&gt; make it considerably
more difficult to accurately identify features.  But a cyclical
cellular automaton is, well, cyclic.  I can, of course, construct a
cyclic grayscale map — and I did — but when you do so there is a
symmetry that it would be nice to break.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot;
                 type=&quot;cyclic-grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This looks like a perfectly decent colormap to me, the only problem
is how do I differentiate values on the left side of the wheel from
values on the right side?  Luminosity alone is not enough, we’re going
to need something else to vary.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This symmetry could certainly be broken with color, for example with a
cyclical version of the infamous rainbow map.  The classic way to generate
it is to vary the channel intensities such that R, G, and B are fully
on for one third of the range, with the other colors either ramping up
or ramping down.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapRGBPlot&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RGB channel intensities for the classic rainbow map.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The classic rainbow colormap rotates through all fully saturated
colors.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because all of the colors in the classic rainbow map are fully
saturated the intensity of the colormap peaks at the secondary colors
yellow, cyan, and purple.  At all three locations two of the RGB
channels are at their maximum values, and the result is that smooth
functions will look like they have peaks at the secondary colors.
This is one of the reasons I’ve hated this colormap through the years.
Another closely related issue is that when I look at this map, I see
six colors: red, yellow, green, cyan, blue and purple.  But they
aren’t taking up approximately equal parts of the map.  There is a
large red section, that transitions into a very narrow yellow section,
followed by a large green section, followed by a narrow cyan section,
and so on.&lt;/p&gt;
&lt;p&gt;One possible way to fix these deficiencies in the rainbow map would be
to smooth out the transitions into and away from the secondary colors.
As shown below, one way would be to ramp up the guns with a sine function
instead of linearly.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapRGBPlot&quot; trans=&quot;sin&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One way to “improve” the classic rainbow map is to smooth out the transition
into and out of the secondary colors yellow, cyan, and purple.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s call this sine ramp up “David’s kludgy rainbow”, because I employ
this kludge whenever I’m in a situation where I actually need a
colormap.  Of course, after seeing the results I always discard the
“color” colormap and find some way to make it work with a grayscale.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;kludge-rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My kludgy “fix” to the rainbow colormap.  The apparent spikes at the
secondary colors are gone, and the size of the six “colors” are more
equal.  But in practice it doesn’t really work any better than the
original rainbow and is an object lesson that amateurs should stay
away from colormap design.  It is however, the rainbow map used in the
Demon visualization.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A lot of ink has been spilt explaining exactly how
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/&quot;&gt;bad&lt;/a&gt;
the &lt;a href=&quot;https://www.climate-lab-book.ac.uk/2014/end-of-the-rainbow/&quot;&gt;rainbow&lt;/a&gt; colormap
really is, so it’s perhaps not too surprising that I aggressively
dislike it.  Even better, since I last seriously considered using a
“color” colormap a considerable amount of ink has been spilt
describing better ways to construct them.  &lt;a href=&quot;https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/&quot;&gt;Many&lt;/a&gt;
end up pointing back to Cynthia Brewer’s
&lt;a href=&quot;http://colorbrewer2.org/#type=sequential&amp;#x26;scheme=BuGn&amp;#x26;n=3&quot;&gt;colorbrewer&lt;/a&gt;.
The basic idea behind most proposals is to assert that the problem
with the rainbow map (or other traditional colormaps like Matlab’s Jet
map) is that euclidean distance in RGB space does not match human
perception.  This is obviously true looking at the rainbow map — each
point is separated by an equal distance in RGB space yet perceptually
we transition through the secondary colors much more quickly than others.&lt;/p&gt;
&lt;p&gt;The proposed solution is to produce maps with equidistant spacing in
some colorspace designed to match human perceptions.  Psycophysicists
have spent decades producing such a space, &lt;a href=&quot;https://en.wikipedia.org/wiki/Lab_color_space#CIELAB&quot;&gt;CIE
Lab&lt;/a&gt;.  So if we
take paths through CIE Lab (or its polar variant HCL) we should end up
with perceptually uniform colormaps — meaning that each step on the
colormap will be perceived to be the same amount of different as any
other step.  But I’m still not convinced that being perceptually
uniform also means that they are generally suitable for extracting
unbiased quantitative information.&lt;/p&gt;
&lt;p&gt;But whether or not they are actually a good idea, d3 now has
&lt;a href=&quot;https://github.com/d3/d3-scale-chromatic&quot;&gt;scale-chromatic&lt;/a&gt; with a
couple of dozen new color scales, all of which look good, most of
which are constructed to be perceptually uniform, and several of which
(the viridis, inferno, magma, and plasma maps) seem to have been very
carefully designed.  There is even a cyclical map in scale-chromatic.&lt;/p&gt;
&lt;p&gt;The pressing question for me is:  how do I work out if any of these
colormaps is actually any good?  Is there anything that can be done much
beyond drawing a heightmap of the world and saying, “yep, looks good”?
What we need are test images with properties that enable us to objectively
scrutinize a colormap.  If we step away from cyclical colormaps for the
moment, &lt;a href=&quot;https://arxiv.org/abs/1509.03700&quot;&gt;Kovesi (2015)&lt;/a&gt; provides us
with just such an image.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kovesi’s image to evaluate colormaps.  Horizontally it’s a linear
ramp from 0 to 1, with a sine wave superimposed on top of it.  The sine
wave has a period of 8 pixels, and a peak-to-value amplitude of 0.1 at
the top of the image.  Vertically, the amplitude of the sine wave in
linearly ramped down to zero by the bottom of the image.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Rainbow colormap applied to Kovesi’s image.  And now we’ve got some
objective evidence to back up our assertion that the rainbow colormap
is rubbish.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;kludge-rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The kludgy rainbow.  It’s a little better, but it’s still apparent that
it’s not at all suitable for quantitative visualization.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Kovesi’s test image is useful for a couple of reasons.  As the
amplitude of the sine wave perturbation decreases at lower rows, it
allows us to immediately evaluate how sensitive the color map is to
small amplitude features.  More importantly, it allows us to determine
if it is equally sensitive to small amplitude features at all points
in the map.  For example, the large green area in the rainbow maps
where most humans have trouble distinguishing small amplitude features
is readily apparent.&lt;/p&gt;
&lt;p&gt;The rapid oscillation of the sine wave is also designed to evaluate
how well a map works at highlighting features on small spatial scales.
This is important, because there is some evidence that perception of
color is subtly different on small spatial scales compared to large
ones.  See Kovesi’s &lt;a href=&quot;https://arxiv.org/abs/1509.03700&quot;&gt;paper&lt;/a&gt; for background
and references to the existing literature on this.&lt;/p&gt;
&lt;h2&gt;Are there colormaps that actually work?&lt;/h2&gt;
&lt;p&gt;So far we’ve worked out that the classic grayscale map is objectively good,
and that the classic rainbow map is not.  The next obvious question would
be, are there “color” colormaps that are also objectively good?&lt;/p&gt;
&lt;p&gt;Not surprisingly, most of the d3 colormaps are excellent.  At the bottom of
this page there is an interactive explorer you can use to view all of the
colormaps in d3-scale-chromatic (as well as the other colormaps discussed
in this post).&lt;/p&gt;
&lt;p&gt;A few that caught my eye are:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;bugn&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;BuGn colormap.  One of a large number of colormaps that smoothly transition
from one color to another.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inferno colormap.  Part of a set including the viridis, magma and plasma
maps, inferno was carefully constructed to be perceptually uniform and to
present a continuous change in lightness.  While more “colorful” than simple
maps that transition from one color to another, the overall impression seems
dominated by the continuous ramp up in lightness.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;cubehelix&quot;&gt;
&lt;/blog-colormap &gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CubeHelix colormap.  This map was designed be both a uniform ramp in
lightness, and to contain a large number of hues.  As a result of the
linear ramp in lightness, it’s quite good at distinguishing small features
in the image.  Due to the large number of hues, it does seem to break into
sections — dark, green orange, purple, and blue.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even among the d3 colormaps, I’m not keen on maps with a large number
of hues even if they perform well on the test image.  The reason is
that in my own perception, I tend to split hues into different
categories.  I see shades of gray, but it’s all gray, which is good
for visualizing quantitative data.  With the multi-hued colormap such
as CubeHelix for example, I see a sequence of separate hues, and I
perceive the different hues to by qualitatively different.&lt;/p&gt;
&lt;p&gt;One way to visualize this is with another test image.  In this case I’m
displaying an exponentially damped sine wave —  the result is a series
of peaks and valleys where the peaks each summit at a different level.&lt;/p&gt;
&lt;p&gt;In grayscale or simple transition between two colors it looks like&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;grayscale&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine wave in grayscale.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;bugn&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine wave with the BuGn map from
d3-scale-chromatic.  The peaks far from center seem a bit more visible
than they do in grayscale, but this is just due to the fact that BuGn
is an inverted map, going from light to dark — as you look through
this page you’ll notice that small features always seem a bit more
discernible on the light part of the maps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With multi-hued colormaps however, different rings seem to be qualitatively
different.  This effect is strongest with the CubeHelix colormap&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;expsin&quot; cmap=&quot;cubehelix&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exponentially damped sine with the d3-scale-chromatic CubeHelix colormap.
Note that the inner circles each seem to be a qualitatively different color.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;d3-scale-chromatic also has a cyclical colormap which they call a Rainbow map.  It is designed to be significantly more pleasant than either the
classic rainbow or my own kludgy rainbow.  It does reasonable well for discerning small features.  The flat spots, however, are more pronounced than for most
of the good linear maps.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;d3rainbow&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;d3 rainbow — the cyclical colormap provided by scale-chromatic.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What’s the difference between good and bad colormaps?&lt;/h2&gt;
&lt;p&gt;Before we circle around to constructing a nice cyclic colormap, I think we
need a better grip on why some colormaps work well for feature discrimination,
and some do not.  Consider the following three maps:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;constant-lightness&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;The top map is the classic rainbow, the middle map is the d3 inferno
scale, and the bottom map is a colorwheel from the HCL space (polar
variant of CIELAB) with constant chroma and luminance.  I’m calling
the bottom map “constant lightness”.&lt;/p&gt;
&lt;p&gt;It seems to be generally accepted that the rainbow map is terrible
because it is not perceptually uniform.  However, the constant
lightness map &lt;em&gt;is&lt;/em&gt; perceptually uniform and seems nearly as bad — if
not worse — than the rainbow map.  What gives?  Well, lets look
again, this time with a color bar below each map showing the grayscale
version of the map generated by taking the L component of each color
in CIELAB space.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;rainbow&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;inferno&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;
&lt;br&gt;
&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;constant-lightness&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;To my eyes, it sure looks like I am able to make out small scale features
when the luminosity of the map is changing, and when the luminosity is
not changing, different hues are doing little for me.  This is particularly
evident in the rainbow map, where the flat parts of the luminosity curve
correspond exactly with the parts of the test image with poor discrimination
ability.&lt;/p&gt;
&lt;p&gt;I take from this that while using a perceptually uniform map might be
nice, it’s not actually all that important.  It does seem to be
important, however, for the map to have a nice monotonically lightness
curve.&lt;/p&gt;
&lt;p&gt;I’m not the first to have come to this conclusion.  Kovesi emphasizes
it as well in his paper, and Mark Abeln has an incredible &lt;a href=&quot;http://therefractedlight.blogspot.com/2010/06/luminance-is-more-important-than-color.html&quot;&gt;demo&lt;/a&gt;
of the same image with luminance removed, and with color removed.  You
want to look at it.&lt;/p&gt;
&lt;h2&gt;Let’s construct a cyclic colormap already&lt;/h2&gt;
&lt;p&gt;It’s been a bit of a journey, but everything is in place to construct a nice
unconfusing cyclical colormap with a good ability to discriminate small features.&lt;/p&gt;
&lt;p&gt;We want:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A simple lightness profile&lt;/li&gt;
&lt;li&gt;No more than two colors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The simple lightness profile will ensure our ability to discriminate small
features.  We need at least two colors to break the symmetry of a cyclical
grayscale map.  If we keep it exactly at two, we can minimize the tendency
to view different colors as qualitatively different things.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapTestImage&quot; type=&quot;rake&quot; cmap=&quot;cyclic-demon&quot; lmap=&quot;true&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColorWheel&quot; type=&quot;cyclic-demon&quot;&gt;
&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;So this is my super simple cyclical colormap.  In lightness, it’s a linear
ramp from black to white and then back to black.  I add a little red and
blue to distinguish the left side of the cycle from the right side of the cycle.&lt;/p&gt;
&lt;p&gt;It’s not the prettiest map (the d3 rainbow map is arguably more attractive)
but it fulfills my primary objective of being able to discriminate small features are all parts of the scale.  So I kind of like it.  And that’s why is the
default colormap for my &lt;a href=&quot;/blog/2018/demon&quot;&gt;Cyclic Cellular Automaton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To generate the actual scale, I just use
&lt;a href=&quot;https://github.com/gka/chroma.js/&quot;&gt;chroma.js&lt;/a&gt;.  Applying
&lt;code&gt;.correctLightness()&lt;/code&gt; to the scales ensures a uniform ramp
in lightness as the scale transitions between colors.  So I just need
to create two scales and then stitch them together, one going from black to
white via red and another scale that goes back by way of blue.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scale1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chroma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;white&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;correctLightness&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scale2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chroma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;white&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;correctLightness&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I’ll leave you with a little widget you can use to select any of the colormaps
discussed in this post.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt; NO JAVASCRIPT — NO COLORMAP (sorry)&lt;/noscript&gt;
&lt;blog-colormap reactclass=&quot;ColormapSelector&quot;&gt;&lt;/blog-colormap&gt;&lt;/p&gt;
&lt;p&gt;All of the code used to generate the images on this page are in a github
&lt;a href=&quot;https://github.com/dkirkman/ws-colormap&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript Demons]]></title><description><![CDATA[A 2d simulation of a cyclical cellular automaton, along with a discussion of its dynamics.  This delightful little   visualization has long been my personal "hello world" when diving into new environments, and I'm happy to inaugurate my blog with it.]]></description><link>https://wildsilicon.com/blog/2018/demon/</link><guid isPermaLink="false">https://wildsilicon.com/blog/2018/demon/</guid><pubDate>Sat, 28 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;style type=&quot;text/css&quot;&gt;
.demon table {
  border-collapse: collapse;
}

.demon td {
  border: 2px solid black;
  height: 50px;
  width: 50px;
  text-align: center;
}

td.demon_neighbor {
  background: #BBBBBB;
}

td.demon_cycle {
  background: #BBBBBB;
}

td.demon_center {
  background: #777777;
}
&lt;/style&gt;
&lt;p&gt;&lt;blog-demon&gt;&lt;/blog-demon&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;noscript&gt;
          NO JAVASCRIPT -- NO CELLULAR AUTOMATON
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This is a very simple 2d cellular automaton.  It has N states denoted 0
to N-1, and evolves according to only a single rule: a cell with
value n will convert any of its neighbors with a value of n-1.  In other
words, a cell in state 5 will convert any of it’s neighbors in state 4 to
state 5.  That may happen even if in the same time step the original cell is
being converted from state 5 to state 6.  The states are cyclical:  state 0
can convert state N-1.  Hence it’s a Cyclical Cellular Automaton, or CCA.&lt;/p&gt;
&lt;p&gt;If at some point in the simulation you can form a loop of adjacent cells
from state 0 to state N-1, and have state N-1 also adjacent to start 0,
then you’ll have a loop that cycles indefinitely.  Such a loop is called
a demon.&lt;/p&gt;
&lt;p&gt;I’m not aware of much literature on CCAs, they first came to my
attention from the August 1989 “Mathematical Recreations”
&lt;a href=&quot;https://www.scientificamerican.com/article/computer-recreations-1989-08/&quot;&gt;column&lt;/a&gt;
written by Alexander Dewdney for Scientific American.  They exhibit
interesting behavior and when started from a random state undergo a
gradual state transition into very ordered dynamics.  Run the
simulation at the top of this page and experience it for yourself.&lt;/p&gt;
&lt;p&gt;As with any cellular automaton, the term &lt;em&gt;neighborhood&lt;/em&gt; admits a variety
of definitions.  In this simulator, I’ve provided two standard options.&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_center&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Von_Neumann_neighborhood&quot;&gt;von Neumann
neighborhood&lt;/a&gt;.
The center cell 4 can convert any of the light gray cells, or cells with
coordinates that differ by one from the center cell in either x or y, but
not both.  Diagonally adjacent cells that differ in both x and y
can not be converted.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_center&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
        &lt;td class=&quot;demon_neighbor&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moore_neighborhood&quot;&gt;Moore
neighborhood&lt;/a&gt;.  The
center cell can convert any of it’s neighbors, even diagonally adjacent
cells.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Personal Background&lt;/h2&gt;
&lt;p&gt;A CCA simulator with 16 states and a von Neumann neighborhood was the
first computer program I &lt;em&gt;ever&lt;/em&gt; wrote.  Because it’s so simple to implement
and because it is also so fun to play with, over the years it’s become my
own personal “Hello World” program when I start working with a new tech
stack.&lt;/p&gt;
&lt;p&gt;I got my first computer in August 1989.  I’d played with computers
before: a few hours at a time after school in the computer lab, a few
minutes stolen here and there at a friends house.  But this was the
first one that was mine, and that I had access too for extended
periods of time.  It was a 286.  I don’t remember the exact brand, but
it was something my parents got at Sears.  It was slick.  It had a
color display, a hard drive, and ran MS DOS 3.1.&lt;/p&gt;
&lt;p&gt;Like all kids in summer with a new computer, I didn’t sleep for a few
weeks while I completed my first game, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pool_of_Radiance&quot;&gt;Pool of
Radiance&lt;/a&gt;.  When I
finished I had the same “well, that was pointless” moment I always
seem to have when finishing a game, but I didn’t dwell long because
classes started up shortly after.  I’m always amused by how quickly a
game can go from the most important thing in the world to pointless
the moment you complete it.  Of course, it didn’t stop me from immediately
proceeding to &lt;a href=&quot;https://en.wikipedia.org/wiki/Curse_of_the_Azure_Bonds&quot;&gt;Curse of the Azure Bonds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At some point in the fall I came across a Dewdney’s Scientific
American article.  I haven’t read the article since that fall 28 years
ago, but it was the first time I’d heard about cellular automata.
Dewdney described “debris”, and “defects”, and “demons” — all of
which you are probably seeing above this text. As soon as I read that
article I knew I had to build my own simulation environment.  The only
problem was that I had no idea how to program.  I had basic on that
old 286, and believe it or not the computer shipped with a manual on
Basic!  So I set off attempted to build my simulator.  I tried off and
on for about two weeks and got noplace — I could simulate the
evolution rules but I could only display about a 100x100 grid, and
updates were glacial.  It felt like minutes an update.&lt;/p&gt;
&lt;p&gt;The closest thing I had to the internet back then was some local BBS,
and a friendly chap on one of them told me that if I really wanted to
make this work I was going to need to use this language called “c”.
So I set off to learn c.  Local library actually had a reference
manual (I don’t recall what it was, but it wasn’t
K&amp;#x26;R).  The only problem was that I didn’t have a compiler.  I didn’t
even know where I could get a compiler!  The same BBS chap suggested that
there were computer labs at Fresno State with copies of Turbo C.  So I
snuck onto the campus and tried to work out how to program in C.  Progress
was slow, but eventually I found a boxed copy of Turbo C++ in Waldenbooks
of all places.  Once I had a C compiler on my personal computer work
could progress at a reasonable pace.&lt;/p&gt;
&lt;p&gt;Armed with a C compiler, a bit of documentation, and a
dream I set off on one of the most memorable programming
adventures of my life.  I had to figure out compiling, linking, VGA
graphics, and most of all the x86 segmented memory architecture.  I
had to use far pointers to access enough memory to fill up the entire
VGA display, but they were too slow to use for the program code
itself so I ended up writing my first mixed memory mode program as well.
Sometime by Thanksgiving I had written my first program: a replica of
of what Dewdney had described.  Set in a full VGA resolution (640x480)
universe with 16 states.  I sat back and waited for demons to appear.&lt;/p&gt;
&lt;p&gt;I had to wait a while.&lt;/p&gt;
&lt;p&gt;I remember that that computer was insanely loud, I couldn’t really
sleep when it was on.  But it stayed on for several nights, slowly
updating.  At first I thought that I must still have bugs in the
program because there was nothing but randomness — no order was
appearing, and certainly no demons.  But eventually order emerged from
chaos and it was all I was promised. Within a few days I had a screen
full of spiraling demons.&lt;/p&gt;
&lt;p&gt;I had achieved my goal, and it didn’t seem pointless.  I’ve been a
programmer ever since.&lt;/p&gt;
&lt;p&gt;At the top of this page is a recreation of the first program I ever
wrote.  The thing that has me stunned in disbelief is how fast it runs.  There
is no waiting for days to see the emergent order with this simulation!
In fact, if I run it with 16 states like I did in 1989 I have to add
an explicit delay between states to slow it down enough to see the
evolution.  To me, this is jaw dropping.  Even despite the fact
that I’ve been writing high performance code for 25 years or so.
It’s one thing to see galaxy simulations slowly evolve to
higher and higher resolution, but nothing has ever hit me quite like
seeing my first program so fast compared to its first
implementation.&lt;/p&gt;
&lt;p&gt;The implementation on this page is the sloppiest, un-optimized version
that could possibly work.  It slammed together in a few hours.  The fact that
it works, and works well, using an interpreted language in a web browser
is a testament to the progress we’ve made during the last few decades.
I’ll come back to this whenever I feel like lamenting the current state
of our engineering culture.&lt;/p&gt;
&lt;p&gt;In any event, I hope you enjoy my simulator.  The default parameters are set
to recreate what I did back in 1989, but it’s a bit more interesting if you
turn off the frame delay and set it to a large number of states with a
Moore neighborhood.  When set to a large number of states there isn’t always
a configuration in the debris that will get things going, so you may need
to kick it off a few times.  But the resulting fun is worth it.&lt;/p&gt;
&lt;h2&gt;Dynamics&lt;/h2&gt;
&lt;p&gt;The basic dynamics are best described with a series of pictures.  These are for
a Moore neighborhood with 30 states.&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 69.5%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;debris&quot;
        title=&quot;&quot;
        src=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png&quot;
        srcset=&quot;/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-c0309.png 240w,
/static/debris-400-300-ecca06ad5dcfecfbbf1523864dd2300a-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The initial random state.  Pieces of this initial randomness that survive to
later times are called debris.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.50000000000001%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;droplet-formation&quot;
        title=&quot;&quot;
        src=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png&quot;
        srcset=&quot;/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-c0309.png 240w,
/static/droplet-formation-400-300-c124325203442c81362777d44220d97c-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
     &lt;em&gt;Eventually,
some order appears in the form of droplets.  These are large areas
with cells in nearly the same state.  As they expand into the debris
the random values in the debris are occasionally just right to start
converting parts of a droplet, setting off a wave that will traverse
the droplet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;droplet-domination&quot;
        title=&quot;&quot;
        src=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png&quot;
        srcset=&quot;/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-c0309.png 240w,
/static/droplet-domination-400-300-a65cc3fbf60facbb4fc8a8345d3e07e3-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The droplets expand and consume most of the debris, but no self replicating
structures have been formed yet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.74999999999999%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;spiral-formation&quot;
        title=&quot;&quot;
        src=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png&quot;
        srcset=&quot;/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-c0309.png 240w,
/static/spiral-formation-400-300-62e743c6bfc0fe5a7256904aa8331bb6-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Eventually (always with a large enough simulation) closed loops
are formed, resulting in an expanding and self-renewing spiral.  The first one in this simulation is at the lower left.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72.25%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;spiral-domination&quot;
        title=&quot;&quot;
        src=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png&quot;
        srcset=&quot;/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-c0309.png 240w,
/static/spiral-domination-400-300-a173b91dc934a4280f98f7e062e89166-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;The spirals rapidly expand to fill all space.  The space is then mostly
ordered, but debris like remnants called defects remain indefinitely.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Orientation of the demons&lt;/h2&gt;
&lt;p&gt;It turns out that the orientation of the demons depends on the neighborhood
type being used.&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 72.25%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;Moore 25 state spiral&quot;
        title=&quot;&quot;
        src=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png&quot;
        srcset=&quot;/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-c0309.png 240w,
/static/moore-25-state-spiral-400-300-fcc7cb475157e72187801f43a428b010-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Demon domination, Moore neighborhood, 25 states.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
  
  &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; ; max-width: 400px; margin-left: auto; margin-right: auto;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 71.74999999999999%; position: relative; bottom: 0; left: 0; background-size: cover; display: block;&quot;
    &gt;
      &lt;img
        class=&quot;gatsby-resp-image-image&quot;
        style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle; position: absolute; top: 0; left: 0; box-shadow: inset 0px 0px 0px 400px white;&quot;
        alt=&quot;von Neumann 16 state spiral&quot;
        title=&quot;&quot;
        src=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png&quot;
        srcset=&quot;/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-c0309.png 240w,
/static/von-neumann-16-state-spiral-400-300-9b9fbc66ce94de984fc15d27a13fbcc4-63047.png 400w&quot;
        sizes=&quot;(max-width: 400px) 100vw, 400px&quot;
      /&gt;
    &lt;/span&gt;
  &lt;/span&gt;
  
  &lt;/a&gt;
    
&lt;em&gt;Demon domination, von Neumann neighborhood, 16 states.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The von Neumann loops are also perfectly valid Moore loops, so if you
flip the neighborhood of a demon dominated von Neumann simulation to
be a Moore neighborhood nothing much will happen.  However, if you
switch a late stage Moore simulation to use von Neumann neighborhoods,
then the demons will reconfigure into diagonal loops.&lt;/p&gt;
&lt;p&gt;Understanding why von Neumann loops are oriented diagonally is
actually pretty strait-forward.  Start with a closed loop like&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Note that this loop is absolutely stable.  No matter what it
encounters in the cells outside of the loop, nothing can disrupt this
loop.  If the cells outside of the loop are debris, the loop will
cycle until it picks up all of the outside cells.  At which point
we’ll &lt;em&gt;probably&lt;/em&gt; have a stable loop that looks like (the configuration
of the second layer isn’t guaranteed, there could be a nearby demon
also influencing those cells)&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The stable closed loop (gray cells) will eventually recruit cells from the debris, and eventually lower row will be as indicated.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At this point, the diagonal spiral structure is already being hinted at, but
if we look at another row (with the stable loop now a bit larger) it becomes
bloody obvious.&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The previously established stable loop (light gray) starts to recruit additional cells.  Now the diagonal pattern is quite clear, and by looking at the cells in
state 1 you can see the first kink where it bends 90 degrees.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To understand the geometry of the Moore neighborhood we just need to realize that
while a Moore simulation &lt;em&gt;could&lt;/em&gt; proceed as above, it’s likely that once the
initial closed loop is formed that it will not recruit new cells precisely
as it did in the von Neumann case — it’s more likely that the first group
of newly recruited cells will looks something like&lt;/p&gt;
&lt;div class=&quot;demon&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;   
    &lt;/tr&gt;    
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;11&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;10&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;9&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;8&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;7&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;6&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;5&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;12&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;13&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;14&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;15&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;0&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;1&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;2&lt;/td&gt;
      &lt;td class=&quot;demon_cycle&quot;&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;   
    &lt;/tr&gt;    
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Because the Moore neighborhood allows cells to recruit diagonal neighbors,
it’s likely that the initial recruitment will have horizontal and vertical
groups, thus establishing the characteristic orientation of the Moore demons.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;The simulator at the top of this page is a React component.  If you’d like
to experiment with new variations (defining new neighborhoods is always
entertaining) the code is on github at &lt;a href=&quot;https://github.com/dkirkman/ws-demon&quot;&gt;dkirkman/ws-demon&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Wikipedia’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_cellular_automaton&quot;&gt;CCA Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.scientificamerican.com/article/computer-recreations-1989-08/&quot;&gt;“A cellular universe of debris,
droplets, defects and demons”&lt;/a&gt;
Alexander Dewdney, Scientific American,
August 1989&lt;/p&gt;</content:encoded></item></channel></rss>